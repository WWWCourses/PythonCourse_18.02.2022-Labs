# --------------------------------- Задача 1. -------------------------------- #
""" Напишете програма, която чете цели числа въведени от потребителя и ги
	съхранява в списък. Програма трябва да продължи да чете стойности, докато
	потребителят не въведе 0. След това тя трябва да покаже всички стойности, въведени от
	потребителя (с изключение на 0), подредени от най-малката до най-голямата стойност,
	като на всеки ред се появява по една стойност. Използвайте или метода за сортиране,
	или функцията за сортиране на списъци.
"""
# numbers = []

# while True:
# 	x = int(input('Enter a number [0 for end]:'))
# 	if x != 0:
# 		numbers.append(x)
# 	else:
# 		break

# sorted_numbers = sorted(numbers)

# for num in sorted_numbers:
# 	print(num)


# --------------------------------- Задача 2. -------------------------------- #
""" При анализиране на данни, събрани като част от научен експеримент, може
 	да се наложи да се премахнат най-крайните (големите) стойности, преди да се
 	извършват някакви други изчисления. Да се създаде списък от стойностите само с n на
 	брой положителни числа. Трябва да се създаде ново копие на създаденият списък с
 	премахнатите n най-големи елемента и n най-малките елементи. Редът на елементите
 	във върнатия списък не трябва да съвпада с реда на елементите в първоначалния
 	списък. Напишете програма, която да чете списък от числа въведени от потребителя и
 	да премахва двете най-големи и двете най-малки стойности. Да се принтира новият
 	списък, както и оригиналният. Програма трябва да генерира подходящо съобщение за
	грешка, ако потребителят въведе по-малко от 4 стойности.
"""
# elements_number = int(input('Enter the number of elements: '))

# if elements_number < 4:
# 	print('Error! You must enter at least 4 elements.')
# else:
# 	elements = []
# 	for i in range(elements_number):
# 		elements.append(int(input('Enter element number {}: '.format(i+1))))

# 	print('Original list: ', elements)
# 	elements.sort()
# 	new_elements = elements[2:-2]
# 	print('New list: ', new_elements)

# --------------------------------- Задача 3. -------------------------------- #
"""Да се създаде програма, която чете думи като вход от клавиатурата, докато
	потребителят не въведе празен ред. След като потребителят въведе празен ред,
	програмата трябва да изведе всяка дума, въведена от потребителя точно веднъж.
	Думите трябва да се показват в същия ред, в който са били въведени. Например, ако
	потребителят въведе:
	first
	second
	first
	third
	second
	тогава програмата трябва да принтира само:
	first
	second
	third
"""
# words = []

# while True:
# 	word = input('Enter a word: ')

# 	if word == '':
# 		break

# 	if word not in words:
# 		words.append(word)

# for word in words:
# 	print(word)

# --------------------------------- Задача 4. -------------------------------- #
""" Да се създаде програма, която да чете цели числа въведени от потребителя,
	докато не бъде въведен празен ред. След като всичките числа са прочетени, програмата
	трябва да показва всички отрицателни числа, последвани от нули, последвани от всички
	положителни числа. Във всяка група номерата трябва да се показват в същия ред, в
	който са въведени от потребителя. Например, ако потребителят въведе стойностите 3, -
	4, 1, 0, -1, 0 и -2, вашата програма трябва да изведе стойностите -4, -1, -2, 0, 0, 3 и 1 .
	Вашата програма трябва да показва всяка стойност на нов ред.
"""
# positives = []
# negatives = []
# zeros = []

# while True:
# 	number = input('Enter a number: ')

# 	if number == '':
# 		break
# 	else:
# 		number = int(number)

# 		if number > 0:
# 			positives.append(number)
# 		elif number < 0:
# 			negatives.append(number)
# 		else:
# 			zeros.append(number)

# # variant 1
# numbers = positives + negatives + zeros
# for number in numbers:
# 	print(number)

# variant 2
# for number in negatives:
# 	print(number)

# for number in zeros:
# 	print(number)

# for number in positives:
# 	print(number)


# --------------------------------- Задача 5. -------------------------------- #
""" За да спечели най-голямата награда в определена лотария, човек трябва да
	съпостави всичките 6 числа от билета си с 6-те числа между 1 и 49, които са изтеглени от
	организатора на лотарията. Напишете програма, която генерира произволен избор от 6
	числа за лотариен билет. Уверете се, че избраните 6 числа не се повтарят. Покажете
	числата във възходящ ред.
"""
# import random

# numbers = []

# for i in range(6):
# 	number = random.randint(1, 49)

# 	while number in numbers:
# 		number = random.randint(1, 49)

# 	numbers.append(number)

# print(numbers)

# --------------------------------- Задача 6. -------------------------------- #
""" Да се напише програма, която генерира всички подсписъци на даден списък.
	Например, списъците на [1, 2, 3] са [], [1], [2], [3], [1, 2], [2, 3], [1, 3] и [1, 2, 3].
"""
# main_list = [1,2,3]
# sublists = [[]]

# variant 1:
# import itertools

# for i in range(0, len(main_list)+1):
#     for subset in itertools.combinations(main_list, i):
#         sublists.append(list(subset))

# variant 2-not proper solution
# for i in range(0, len(main_list)):
# 	sublists.append( [main_list[i]] )
# 	for j in range(i+1, len(main_list)):
# 		sublists.append( [main_list[i]] + [main_list[j]] )
# 		print(sublists)
# print(sublists)
# --------------------------------- Задача 7. -------------------------------- #
""" Напишете програма, която намира максимална редица от последователни
	еднакви елементи в списък.
	Пример: {2, 1, 1, 2, 3, 3, 2, 2, 2, 1} -> {2, 2, 2}. ‘2’ * counter
"""
# l = [2, 1, 1, 2, 3, 3, 2, 2, 2, 1]
# max_sequence_length = 0

# for i in range(len(l)):
# 	sequence_counter = 1

# 	for j in range(i+1, len(l)):
# 		if l[i] == l[j]:
# 			sequence_counter += 1
# 		else:
# 			break

# 	if sequence_counter > max_sequence_length:
# 		max_sequence_length = sequence_counter
# 		max_sequence_element = l[i]

# print(max_sequence_element, '*', max_sequence_length)


# --------------------------------- Задача 8. -------------------------------- #
""" Напишете програма, която намира максималната редица от последователни
	нарастващи елементи в списък.
	Пример: {3, 2, 3, 4, 2, 2, 4} -> {2, 3, 4}.
"""
# see above solution

# --------------------------------- Задача 9. -------------------------------- #
""" Напишете програма, която създава следните квадратни матрици и ги
	извежда на конзолата във форматиран вид. Размерът на матриците се въвежда от
	конзолата. Пример за (4,4):

			1	5	9	13			1	8	9	16
		a)	2	6	1	014    b)	2	7	10	15
			3	7	11	15			3	6	11	14
			4	8	12	16			4	5	12	13
"""

from traceback import print_tb

n = 4
m = []

for i in range(1, 5):
	prev = i
	row = []
	for j in range(1, 5):
		row.append(prev)
		prev += n

	m.append(row)

for i in range(0, 4):
	for j in range(0, 4):
		print('{:2d}'.format(m[i][j]), end=' ')
	print()